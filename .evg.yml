functions:
  "fetch_source":
    - command: git.get_project
      params:
        directory: "stitch-java-sdk"
  "setup_mongod":
    - command: shell.exec
      params:
        script: |
          set -e
          curl --silent ${mongodb_url} | tar xz
          cd mongodb-*
          mkdir db_files
  "run_mongod":
    - command: shell.exec
      params:
        background: true
        script: |
          set -e
          cd mongodb-*
          echo "starting mongod..."
          ./bin/mongod --dbpath ./db_files --port 26000 --replSet test
    - command: shell.exec
      params:
        script: |
          set -e
          cd mongodb-*
          echo "waiting for mongod to start up"
          ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
          ./bin/mongo --port 26000 --eval 'rs.initiate()'
          echo "mongod is up."
  "setup_android":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          SDK_HOME=`pwd`/.android
          if [ ! -e  $SDK_HOME ]; then
              echo "Installing ANDROID SDK"
              DOWNLOAD_LOGS=$SDK_HOME/download_logs
              mkdir -p $SDK_HOME
              mkdir -p $DOWNLOAD_LOGS
              cd $SDK_HOME
              mkdir .android
              touch .android/repositories.cfg
              export JAVA_HOME="/opt/java/jdk8"
              export ANDROID_HOME=$SDK_HOME
              export ANDROID_SDK_ROOT=$SDK_HOME
              export ANDROID_SDK_HOME=$SDK_HOME
              SDK_PACKAGE=sdk-tools-darwin-4333796.zip
              curl -O -s https://dl.google.com/android/repository/$SDK_PACKAGE
              unzip -o -qq $SDK_PACKAGE
              export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
              yes | $SDK_HOME/tools/bin/sdkmanager --channel=0 \
                  "platforms;android-28"  \
                  "emulator" \
                  "patcher;v4" \
                  "platform-tools"  \
                  "build-tools;28.0.3" \
                  "system-images;android-26;google_apis;x86_64" \
                  "extras;intel;Hardware_Accelerated_Execution_Manager"
              PLATFORM_TOOLS=platform-tools-latest-darwin.zip
              curl -OL -s https://dl.google.com/android/repository/$PLATFORM_TOOLS
              unzip -o -qq $PLATFORM_TOOLS
              $SDK_HOME/tools/bin/sdkmanager --update
              yes | $SDK_HOME/tools/bin/sdkmanager --licenses
          fi
  "setup_stitch":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          echo "cloning stitch"
          mkdir -p src/github.com/10gen
          git clone git@github.com:10gen/stitch src/github.com/10gen/stitch
          echo "downloading update_doc"
          curl --silent -O "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_osx_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b7a5c9ec4432c400181c_17_10_15_01_19_33/update_doc"
          echo "downloading assisted_agg"
          curl --silent -O "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_osx_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b7ab2a60ed5647001827_17_10_15_01_19_39/assisted_agg"
          chmod +x update_doc
          chmod +x assisted_agg
          echo "building transpiler"
          cd src/github.com/10gen/stitch/etc/transpiler
          curl -O "https://nodejs.org/dist/v8.11.2/node-v8.11.2-darwin-x64.tar.gz"
          tar zxf node-v8.11.2-darwin-x64.tar.gz
          export PATH=`pwd`/node-v8.11.2-darwin-x64/bin/:$PATH
          rm -rf $HOME/.yarn
          curl -o- -L https://yarnpkg.com/install.sh | bash
          export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
          yarn install && yarn run build -t ${transpiler_target}
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          export PATH=`pwd`/:$PATH
          curl --silent https://dl.google.com/go/go1.10.2.darwin-amd64.tar.gz | tar xz
          export GOROOT=`pwd`/go
          export PATH=$GOROOT/bin:$PATH
          export GOPATH=`pwd`
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          export PATH="$PATH:$STITCH_PATH/etc/transpiler/bin"
          echo "running stitch"
          # TODO: Probably better to get an API key added to mimic cloud
          go run $STITCH_PATH/cmd/auth/user.go addUser -domainID 000000000000000000000000 -mongoURI mongodb://localhost:26000 -salt 'DQOWene1723baqD!_@#' -id "unique_user@domain.com" -password "password"
  "run_stitch":
    - command: shell.exec
      params:
        shell: "bash"
        silent: true
        background: true
        script: |
          export PATH=`pwd`/:$PATH
          export GOROOT=`pwd`/go
          export PATH=$GOROOT/bin:$PATH
          export GOPATH=`pwd`
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          export PATH="$PATH:$STITCH_PATH/etc/transpiler/bin"
          go run $STITCH_PATH/cmd/server/main.go --configFile $STITCH_PATH/etc/configs/test_config_sdk_base.json --configFile $STITCH_PATH/etc/configs/test_config_sdk_android.json 
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail http://localhost:9090); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done
  "setup_test_creds":
    - command: shell.exec
      params:
        shell: "bash"
        silent: true
        script: |
          set -e
          cd stitch-java-sdk
          echo "test.stitch.twilioSid=${test_twilio_sid}" >> local.properties
          echo "test.stitch.twilioAuthToken=${test_twilio_authtoken}" >> local.properties
          echo "test.stitch.awsAccessKeyId=${test_aws_key}" >> local.properties
          echo "test.stitch.awsSecretAccessKey=${test_aws_secret}" >> local.properties
          echo "test.stitch.fcmSenderId=${test_fcm_sender_id}" >> local.properties
          echo "test.stitch.fcmApiKey=${test_fcm_api_key}" >> local.properties
          echo "test.stitch.androidPerfStitchAPIKey=${perf_android_api_key}" >> local.properties

          echo "test.stitch.perf.stitchHost=http://localhost:9090" >> local.properties
          echo "test.stitch.perf.iters=5" >> local.properties
          echo "test.stitch.perf.hostname=Evergreen" >> local.properties
          echo "test.stitch.perf.docSizes=1024,2048,4096,8192" >> local.properties
          echo "test.stitch.perf.numDocs=100,500,1000,2000,4000" >> local.properties
          echo "test.stitch.perf.dataGranularity=1000" >> local.properties
          echo "test.stitch.perf.outliers=0" >> local.properties
          echo "test.stitch.perf.outputStdout=true" >> local.properties
          echo "test.stitch.perf.outputStitch=true" >> local.properties
          echo "test.stitch.perf.rawOutput=false" >> local.properties

  "create_emulator":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e

          SDK_HOME=`pwd`/.android
          export JAVA_HOME="/opt/java/jdk8"

          export ANDROID_HOME=$SDK_HOME
          export ANDROID_SDK_ROOT=$SDK_HOME
          export ANDROID_SDK_HOME=$SDK_HOME

          # Create the AVD
          echo "Creating AVD"
          echo no | $SDK_HOME/tools/bin/avdmanager create avd -n android_avd -c 1000M -k "system-images;android-26;google_apis;x86_64" -f
  "cleanup_adb":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          echo "Cleaning up old adb"
          pid=`ps aux | pgrep adb`
          if [ -z "$pid" ]
          then
                echo "\$pid is empty"
          else
                kill -9 $pid
          fi
  "setup_emulator":
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          set -e

          SDK_HOME=`pwd`/.android
          export JAVA_HOME="/opt/java/jdk8"

          export ANDROID_HOME=$SDK_HOME
          export ANDROID_SDK_ROOT=$SDK_HOME
          export ANDROID_SDK_HOME=$SDK_HOME

          # Create the AVD
          echo "Creating AVD"
          $SDK_HOME/tools/emulator -avd android_avd -no-audio -no-window -no-snapshot -wipe-data -gpu off &
          EMULATOR_PID=$!
          sleep 86400
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          echo "Waiting for emulator to be ready"

          SDK_HOME=`pwd`/.android
          
          # Wait for ADB to detect the device
          $SDK_HOME/platform-tools/adb wait-for-device

          # Belt and braces waiting for the device
          bootanim=""
          failcounter=0
          timeout_in_sec=360

          until [[ "$bootanim" =~ "stopped" ]]; do
            bootanim=`$SDK_HOME/platform-tools/adb -e shell getprop init.svc.bootanim 2>&1 &`
            if [[ "$bootanim" =~ "device not found" || "$bootanim" =~ "device offline"
              || "$bootanim" =~ "running" ]]; then
              let "failcounter += 1"
              if [[ "$failcounter" -gt timeout_in_sec ]]; then
                echo "Timeout ($timeout_in_sec seconds) reached; failed to start emulator"
                exit 1
              elif (( "$failcounter" % 10 )); then
                 echo "Waiting for emulator to start"
              fi
            fi
            sleep 5
          done
          echo "Emulator is ready"
  "setup_logcat":
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          set -e
          LOGCAT_PID=''
          cleanup() {
              kill -9 $LOGCAT_PID
          }
          trap cleanup EXIT

          SDK_HOME=`pwd`/.android
          $SDK_HOME/platform-tools/adb logcat &
          LOGCAT_PID=$!
          sleep 86400
  "publish_coveralls":
    - command: shell.exec
      params:
        shell: "bash"
        silent: true
        script: |
          set -e
          echo export COVERALLS_REPO_TOKEN=${coveralls_repo_token} >> creds
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          source ./creds
          SDK_HOME=`pwd`/.android
          export JAVA_HOME="/opt/java/jdk8"

          export ANDROID_HOME=$SDK_HOME
          export ANDROID_SDK_ROOT=$SDK_HOME
          export ANDROID_SDK_HOME=$SDK_HOME
          cd stitch-java-sdk
          export CI_NAME="evergreen"
          export CI_BUILD_NUMBER="${version_id}"
          export COVERALLS_PARALLEL=true
          export COVERALLS_GIT_COMMIT=${revision}
          if [ -z "${github_pr_number}" ]
          then
            if [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            export CI_BRANCH=${branch_name}
          else
            PR_INFO=`curl https://api.github.com/repos/${github_org}/${github_repo}/pulls/${github_pr_number}`
            BRANCH=`echo $PR_INFO | python -c "import sys, json; print json.load(sys.stdin)['head']['ref']"`
            export CI_BRANCH=$BRANCH
            export CI_PULL_REQUEST=${github_pr_number}
          fi
          ./gradlew coveralls
  "setup_android_sdk_env_vars":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          SDK_HOME=`pwd`/.android
          export JAVA_HOME="/opt/java/jdk8"

          export ANDROID_HOME=$SDK_HOME
          export ANDROID_SDK_ROOT=$SDK_HOME
          export ANDROID_SDK_HOME=$SDK_HOME
          cd stitch-java-sdk
          echo "test.stitch.baseURL=http://localhost:9090" >> local.properties
tasks:
  - name: lint
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            SDK_HOME=`pwd`/.android
            export JAVA_HOME="/opt/java/jdk8"

            export ANDROID_HOME=$SDK_HOME
            export ANDROID_SDK_ROOT=$SDK_HOME
            export ANDROID_SDK_HOME=$SDK_HOME
            cd stitch-java-sdk
            ./gradlew lint --continue --warning-mode=all < /dev/null
    post:
      command: s3.put
      params:
        aws_key: ${test_artifacts_aws_key}
        aws_secret: ${test_artifacts_aws_secret}
        local_files_include_filter:
          - stitch-java-sdk/**/build/reports/**/*lint*.html
        remote_file: ${build_id}/report
        bucket: stitch-test-artifacts
        content_type: text/html
        permissions: public-read
  - name: ktlint
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            SDK_HOME=`pwd`/.android
            export JAVA_HOME="/opt/java/jdk8"

            export ANDROID_HOME=$SDK_HOME
            export ANDROID_SDK_ROOT=$SDK_HOME
            export ANDROID_SDK_HOME=$SDK_HOME
            cd stitch-java-sdk
            ./gradlew ktlint --continue --warning-mode=all < /dev/null
  - name: checkstyle
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            SDK_HOME=`pwd`/.android
            export JAVA_HOME="/opt/java/jdk8"

            export ANDROID_HOME=$SDK_HOME
            export ANDROID_SDK_ROOT=$SDK_HOME
            export ANDROID_SDK_HOME=$SDK_HOME
            cd stitch-java-sdk
            ./gradlew checkstyle --continue --warning-mode=all < /dev/null
    post:
      command: s3.put
      params:
        aws_key: ${test_artifacts_aws_key}
        aws_secret: ${test_artifacts_aws_secret}
        local_files_include_filter:
          - stitch-java-sdk/**/build/outputs/**/*checkstyle*.html
        remote_file: ${build_id}/report
        bucket: stitch-test-artifacts
        content_type: text/html
        permissions: public-read
  - name: findbugs
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            SDK_HOME=`pwd`/.android
            export JAVA_HOME="/opt/java/jdk8"

            export ANDROID_HOME=$SDK_HOME
            export ANDROID_SDK_ROOT=$SDK_HOME
            export ANDROID_SDK_HOME=$SDK_HOME
            cd stitch-java-sdk
            ./gradlew findbugs --continue --warning-mode=all < /dev/null
    post:
      command: s3.put
      params:
        aws_key: ${test_artifacts_aws_key}
        aws_secret: ${test_artifacts_aws_secret}
        local_files_include_filter:
          - stitch-java-sdk/**/build/outputs/**/*findbugs*.html
        remote_file: ${build_id}/report
        bucket: stitch-test-artifacts
        content_type: text/html
        permissions: public-read
  - name: pmd
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            SDK_HOME=`pwd`/.android
            export JAVA_HOME="/opt/java/jdk8"

            export ANDROID_HOME=$SDK_HOME
            export ANDROID_SDK_ROOT=$SDK_HOME
            export ANDROID_SDK_HOME=$SDK_HOME
            cd stitch-java-sdk
            ./gradlew pmd --continue --warning-mode=all < /dev/null
    post:
      command: s3.put
      params:
        aws_key: ${test_artifacts_aws_key}
        aws_secret: ${test_artifacts_aws_secret}
        local_files_include_filter:
          - stitch-java-sdk/**/build/outputs/**/*pmd*.html
        remote_file: ${build_id}/report
        bucket: stitch-test-artifacts
        content_type: text/html
        permissions: public-read
  - name: run_core_sdk_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:stitch-core-sdk:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/sdk/build/test-results/test/*.xml"

  - name: run_android_sdk_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:stitch-android-coretest:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/coretest/build/outputs/androidTest-results/connected/*.xml"

  - name: run_core_services_aws_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-aws:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/aws/build/test-results/test/*.xml"

  - name: run_android_services_aws_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            ps aux
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-aws:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/aws/build/outputs/androidTest-results/test/*.xml"

  - name: run_core_services_aws_s3_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-aws-s3:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/aws-s3/build/test-results/test/*.xml"

  - name: run_android_services_aws_s3_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-aws-s3:connectedAndroidTest
    post:
    - command: attach.xunit_results
      params:
      files:
        - "./stitch-java-sdk/android/services/aws-s3/build/outputs/androidTest-results/test/*.xml"

  - name: run_core_services_aws_ses_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-aws-ses:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/aws-ses/build/test-results/test/*.xml"

  - name: run_android_services_aws_ses_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-aws-ses:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/aws-ses/build/outputs/androidTest-results/test/*.xml"

  - name: run_core_services_fcm_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh  :core:core-services:stitch-core-services-fcm:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/fcm/build/test-results/test/*.xml"

  - name: run_android_services_fcm_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh  :android:android-services:stitch-android-services-fcm:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/fcm/build/outputs/androidTest-results/test/*.xml"

  - name: run_core_services_http_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-http:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/http/build/test-results/test/*.xml"

  - name: run_android_services_http_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-http:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/http/build/outputs/androidTest-results/test/*.xml"

  - name: run_core_services_mongodb_local_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-mongodb-local:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/mongodb-local/build/test-results/test/*.xml"

  - name: run_android_services_mongodb_local_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-mongodb-local:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/mongodb-local/build/outputs/androidTest-results/test/*.xml"

  - name: run_core_services_mongodb_remote_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-mongodb-remote:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/mongodb-remote/build/test-results/test/*.xml"

  - name: run_android_services_mongodb_remote_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-mongodb-remote:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/mongodb-remote/build/outputs/androidTest-results/connected/*.xml"

  - name: run_android_services_mongodb_remote_perftests_tests
    commands:
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-mongodb-remote-perftests:connectedAndroidTest
    post:
    - command: attach.xunit_results
      params:
      files:
      - "./stitch-java-sdk/android/services/mongodb-remote-perftests/build/outputs/androidTest-results/connected/*.xml"

  - name: run_core_services_twilio_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :core:core-services:stitch-core-services-twilio:test
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/core/services/twilio/build/test-results/test/*.xml"

  - name: run_android_services_twilio_tests
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            sh stitch-java-sdk/etc/run_core_test.sh :android:android-services:stitch-android-services-twilio:connectedAndroidTest
    post:
      - command: attach.xunit_results
        params:
        files:
          - "./stitch-java-sdk/android/services/twilio/build/outputs/androidTest-results/test/*.xml"

task_groups:
  - name: run_core_tests
    setup_group_can_fail_task: true
    max_hosts: 2
    setup_group:
      - func: "fetch_source"
      - func: "setup_android"
    tasks:
      - run_core_sdk_tests
      - run_core_services_mongodb_remote_tests
      - run_core_services_aws_tests
      - run_core_services_aws_s3_tests
      - run_core_services_aws_ses_tests
      - run_core_services_fcm_tests
      - run_core_services_http_tests
      - run_core_services_mongodb_local_tests
      - run_core_services_twilio_tests
  - name: run_android_tests
    setup_group_can_fail_task: true
    max_hosts: 4
    setup_group:
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "setup_android"
      - func: "run_mongod"
      - func: "setup_stitch"
      - func: "setup_test_creds"
      - func: "setup_android_sdk_env_vars"
      - func: "cleanup_adb"
      - func: "create_emulator"
      - func: "setup_logcat"
    setup_task:
      - func: "run_mongod"
      - func: "run_stitch"
      - func: "setup_emulator"
    tasks:
      - run_android_sdk_tests
      - run_android_services_mongodb_remote_tests
      - run_android_services_aws_tests
      - run_android_services_aws_s3_tests
      - run_android_services_aws_ses_tests
      - run_android_services_fcm_tests
      - run_android_services_http_tests
      - run_android_services_mongodb_local_tests
      - run_android_services_twilio_tests
  - name: run_linter
    setup_group_can_fail_task: true
    max_hosts: 2
    setup_group:
      - func: "fetch_source"
      - func: "setup_android"
    tasks:
      - findbugs
      - lint
      - ktlint
      - checkstyle
      - pmd
buildvariants:
- name: macos-1014
  display_name: macos-1014
  run_on:
    - macos-1014
  expansions:
    go_url: "https://dl.google.com/go/go1.11.1.linux-amd64.tar.gz"
    mongodb_url: http://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.2.tgz
    transpiler_target: node8-macos
  tasks:
    - name: run_core_tests
    - name: run_android_tests
    - name: run_linter
