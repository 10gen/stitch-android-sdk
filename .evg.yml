functions:
  "fetch_go111":
    - command: shell.exec
      params:
        script: |
          set -e
          wget --quiet ${go_url}
          tar xvf ./go1.11*gz
  "fetch_source":
    - command: git.get_project
      params:
        directory: "stitch-java-sdk"

  "setup_mongod":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          curl --silent ${mongodb_url} | tar xvz
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          set -e
          cd mongodb-*
          echo "starting mongod..."
          mkdir db_files
          ./bin/mongod --dbpath ./db_files --port 26000 --replSet test
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          cd mongodb-*
          echo "waiting for mongod to start up"
          ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
          ./bin/mongo --port 26000 --eval 'rs.initiate()'
          echo "mongod is up."

  "setup_stitch":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          echo "cloning stitch"
          mkdir -p src/github.com/10gen
          git clone git@github.com:10gen/stitch src/github.com/10gen/stitch

          echo "downloading libmongo"
          wget --quiet "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_linux_64_patch_a4c34cbf6cdd2036fef442f966e404c8be506e62_5bb3da540305b91647c0dfd9_18_10_02_20_51_32/libmongo.so"
          chmod +x libmongo.so

          echo "building transpiler"
          cd src/github.com/10gen/stitch/etc/transpiler
          curl -OL https://yarnpkg.com/latest.tar.gz
          tar zvxf latest.tar.gz
          mv yarn-* yarn
          export PATH="`pwd`/yarn/bin:$PATH"
          yarn install && yarn run build -t ${transpiler_target}
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          set -e
          export GOPATH=`pwd`
          export PATH="`pwd`:$PATH"
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          export PATH="$PATH:$STITCH_PATH/etc/transpiler/bin"
          echo "running stitch"
          # TODO: Probably better to get an API key added to mimic cloud
          export GOROOT=`pwd`/go
          export PATH=`pwd`/go/bin:$PATH
          go run $STITCH_PATH/cmd/auth/user.go addUser -domainID 000000000000000000000000 -mongoURI mongodb://localhost:26000 -salt 'DQOWene1723baqD!_@#' -id "unique_user@domain.com" -password "password"
          go run $STITCH_PATH/cmd/server/main.go --configFile $STITCH_PATH/etc/configs/test_config.json
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail http://localhost:9090); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done

  "setup_test_creds":
    - command: shell.exec
      params:
        shell: "bash"
        silent: true
        script: |
          set -e
          cd stitch-java-sdk
          echo "test.stitch.twilioSid=${test_twilio_sid}" >> local.properties
          echo "test.stitch.twilioAuthToken=${test_twilio_authtoken}" >> local.properties
          echo "test.stitch.awsAccessKeyId=${test_aws_key}" >> local.properties
          echo "test.stitch.awsSecretAccessKey=${test_aws_secret}" >> local.properties
          echo "test.stitch.fcmSenderId=${test_fcm_sender_id}" >> local.properties
          echo "test.stitch.fcmApiKey=${test_fcm_api_key}" >> local.properties

  "setup_emulator":
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          set -e
          EMULATOR_PID=''
          cleanup() {
              kill -9 $EMULATOR_PID
              avdmanager delete avd -n android_avd
          }
          trap cleanup EXIT

          # Create the AVD
          echo no | avdmanager create avd --force -k "system-images;android-26;google_apis;x86_64" --name android_avd -p android_avd

          # Start the AVD in the background
          emulator @android_avd -no-window -no-audio &
          EMULATOR_PID=$!
          sleep infinity
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          echo "Waiting for emulator to be ready"

          # Wait for ADB to detect the device
          adb wait-for-device

          # Wait until boot animation stops (this can take a long time!)
          bootanim=""
          failcounter=0
          timeout_in_sec=600
          until [[ "$bootanim" =~ "stopped" ]]; do
            bootanim=`adb -e shell getprop init.svc.bootanim 2>&1`
            if [[ "$bootanim" =~ "device not found" || "$bootanim" =~ "device offline"
              || "$bootanim" =~ "running" ]]; then
              let "failcounter += 1"
              echo "Waiting for emulator to start"
              if [[ $failcounter -gt timeout_in_sec ]]; then
                echo "Timeout ($timeout_in_sec seconds) reached; failed to start emulator"
                exit 1
              fi
            fi
            sleep 1
          done

          echo "Emulator is ready"

  "publish_coveralls":
    - command: shell.exec
      params:
        shell: "bash"
        silent: true
        script: |
          set -e
          echo export COVERALLS_REPO_TOKEN=${coveralls_repo_token} >> creds
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          source ./creds
          if [ -z "$ANDROID_HOME" ]
          then
            export ANDROID_HOME=$(pwd)/android_sdk
          fi
          cd stitch-java-sdk
          export CI_NAME="evergreen"
          export CI_BUILD_NUMBER="${version_id}"
          export COVERALLS_PARALLEL=true
          export COVERALLS_GIT_COMMIT=${revision}
          if [ -z "${github_pr_number}" ]
          then
            if [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            export CI_BRANCH=${branch_name}
          else
            PR_INFO=`curl https://api.github.com/repos/${github_org}/${github_repo}/pulls/${github_pr_number}`
            BRANCH=`echo $PR_INFO | python -c "import sys, json; print json.load(sys.stdin)['head']['ref']"`
            export CI_BRANCH=$BRANCH
            export CI_PULL_REQUEST=${github_pr_number}
          fi
          ./gradlew coveralls

tasks:
  - name: lint
    commands:
      - func: "fetch_source"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            cd stitch-java-sdk
            ./gradlew checkstyle ktlint findbugs pmd lint --continue --warning-mode=all < /dev/null

  - name: run_core_tests
    priority: 100
    exec_timeout_secs: 3600
    commands:
      - func: "fetch_go111"
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "setup_stitch"
      - func: "setup_test_creds"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            SDK_ROOT=$(pwd)/android_sdk
            mkdir $SDK_ROOT
            cd $SDK_ROOT
            SDK_PACKAGE=sdk-tools-linux-4333796.zip
            curl -O https://dl.google.com/android/repository/$SDK_PACKAGE
            unzip $SDK_PACKAGE
            yes | ./tools/bin/sdkmanager --channel=0 \
              "platforms;android-28"  \
              "patcher;v4"  \
              "platform-tools"  \
              "build-tools;28.0.0"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            export ANDROID_HOME=$(pwd)/android_sdk
            cd stitch-java-sdk
            echo "running java tests"
            echo "test.stitch.baseURL=http://localhost:9090" >> local.properties
            ./gradlew test jacocoTestReport --info --continue --warning-mode=all --stacktrace < /dev/null
      - func: "publish_coveralls"

  - name: run_android_tests
    exec_timeout_secs: 3600
    commands:
      - func: "fetch_go111"
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "setup_stitch"
      - func: "setup_emulator"
      - func: "setup_test_creds"
      - command: shell.exec
        params:
          shell: "bash"
          background: true
          script: |
            set -e
            LOGCAT_PID=''
            cleanup() {
                kill -9 $LOGCAT_PID
            }
            trap cleanup EXIT

            adb logcat &
            LOGCAT_PID=$!
            sleep infinity
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            cd stitch-java-sdk
            echo "running android tests"
            echo "test.stitch.baseURL=http://10.0.2.2:9090" >> local.properties
            ./gradlew connectedAndroidTest jacocoTestReport --info --continue --warning-mode=all --stacktrace  < /dev/null
      - func: "publish_coveralls"

  - name: finalize_coverage
    depends_on:
      - name: run_core_tests
        variant: "ubuntu-1604"
        status: '*'
      - name: run_android_tests
        variant: "linux-64-android"
        status: '*'
    commands:
      - command: shell.exec
        params:
          shell: "bash"
          silent: true
          script: |
            set -e
            echo export COVERALLS_TOKEN=${coveralls_repo_token} >> creds
      - command: shell.exec
        params:
          silent: true
          script: |
            set -e
            source ./creds
            curl -k -X POST "https://coveralls.io/webhook?repo_token=$COVERALLS_TOKEN" -H "Content-Type: application/json" -d "{\"payload\": {\"build_num\": \"${version_id}\", \"status\": \"done\"}}"

post:
  - command: attach.xunit_results
    params:
      files:
        - "./stitch-java-sdk/core/sdk/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/admin-client/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/mongodb-local/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/mongodb-remote/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/aws-s3/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/aws-ses/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/fcm/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/http/build/test-results/test/*.xml"
        - "./stitch-java-sdk/core/services/twilio/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/coretest/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/services/mongodb-local/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/services/mongodb-remote/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/services/aws-s3/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/services/aws-ses/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/services/http/build/test-results/test/*.xml"
        - "./stitch-java-sdk/server/services/twilio/build/test-results/test/*.xml"
        - "./stitch-java-sdk/android/coretest/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/mongodb-local/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/mongodb-remote/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/aws-s3/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/aws-ses/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/fcm/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/http/build/outputs/androidTest-results/connected/*.xml"
        - "./stitch-java-sdk/android/services/twilio/build/outputs/androidTest-results/connected/*.xml"
  - command: s3.put
    params:
      aws_key: ${test_artifacts_aws_key}
      aws_secret: ${test_artifacts_aws_secret}
      local_files_include_filter:
        - stitch-java-sdk/**/build/outputs/**/*checkstyle*.html
        - stitch-java-sdk/**/build/outputs/**/*findbugs*.html
        - stitch-java-sdk/**/build/outputs/**/*pmd*.html
        - stitch-java-sdk/**/build/reports/**/*lint*.html
      remote_file: ${build_id}/report
      bucket: stitch-test-artifacts
      content_type: text/html
      permissions: public-read

buildvariants:
- name: ubuntu-1604
  display_name: Ubuntu-1604
  run_on:
    - ubuntu1604-build
  expansions:
    go_url: "https://dl.google.com/go/go1.11.1.linux-amd64.tar.gz"
    mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.2.tgz
    transpiler_target: node8-linux
  tasks:
    - name: run_core_tests
- name: linux-64
  display_name: Linux-64
  run_on:
    - baas-linux
  expansions:
    go_url: "https://dl.google.com/go/go1.11.1.linux-amd64.tar.gz"
    mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.2.tgz
    transpiler_target: node8-linux
  tasks:
    - name: lint
    - name: finalize_coverage
- name: linux-64-android
  display_name: Linux-64-Android
  run_on:
    - baas-java-sdk
  expansions:
    go_url: "https://dl.google.com/go/go1.11.1.linux-amd64.tar.gz"
    mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.2.tgz
    transpiler_target: node8-linux
  tasks:
    - name: run_android_tests
