def configDir = new File(rootDir, 'config')

group = 'org.mongodb'
version = '4.0.0-SNAPSHOT'

subprojects {
    def projectName = project.displayName.substring(
            project.displayName.indexOf(":")+1, project.displayName.length()-1).replace(":", "_")

    if (["core", "server"].contains(projectName)) {
        return
    }

    group = 'org.mongodb'
    version = '4.0.0-SNAPSHOT'

    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'

    buildscript {
        repositories {
            google()
            jcenter()
            mavenLocal()
            mavenCentral()
        }
        configurations.all {
            resolutionStrategy {
                force 'org.codehaus.groovy:groovy-all:2.4.12'
            }
        }
    }

    configurations {
        ktlint
    }

    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        ktlint "com.github.shyiko:ktlint:0.23.1"
    }

    ext {
        min_api = 21
        target_api = 27
        build_tools_version = '27.0.3'
        architecture_components_version = '1.1.1'
        support_library_version = '27.1.1'
        google_play_services_version = '15.0.1'
        kotlin_version = '1.2.41'
        config_dir = configDir
    }

    afterEvaluate { project ->
        if (project.plugins.hasPlugin("java")) {

            if (!project.hasProperty("sourceCompatibility")) {
                sourceCompatibility = JavaVersion.VERSION_1_7
            }
            if (!project.hasProperty("targetCompatibility")) {
                targetCompatibility = JavaVersion.VERSION_1_7
            }

            compileTestJava {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }

            task findbugs(dependsOn: ['findbugsMain', 'findbugsTest']) {
            }

            jacocoTestReport {
                reports {
                    xml.enabled true
                    html.enabled false
                }
            }

            test {
                outputs.upToDateWhen { false }

                Properties properties = new Properties()
                File file = project.rootProject.file('local.properties')
                if (file.exists()) {
                    properties.load(project.rootProject.file('local.properties').newDataInputStream())
                }
                systemProperty "test.stitch.baseURL", properties.getProperty("test.stitch.baseURL", "http://localhost:9090")
            }

            task sourcesJar(type: Jar) {
                from sourceSets.main.allJava
                classifier 'sources'
            }

            task javadocJar(type: Jar) {
                from javadoc
                classifier 'javadoc'
            }

            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.java
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }
        } else if (project.plugins.hasPlugin("com.android.library")) {
            task sourcesJar(type: Jar) {
                from android.sourceSets.main.java.srcDirs
                classifier 'sources'
            }

            task javadoc(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                android.libraryVariants.all { variant ->
                    if (variant.name == 'release') {
                        owner.classpath += variant.javaCompile.classpath
                    }
                }
                exclude '**/R.html', '**/R.*.html', '**/index.html'
            }

            task javadocJar(type: Jar) {
                from javadoc.destinationDir
                classifier = 'javadoc'
            }

            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.android
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }
        }

        tasks.withType(FindBugs) {
            effort = 'max'
            reports {
                xml.enabled = false
                html.enabled = true
                html.setDestination new File("$project.buildDir/outputs/findbugs/$projectName-findbugs.html")
            }
            excludeFilter = new File(configDir, 'findbugs.xml')
        }
        tasks.withType(Javadoc) {
            excludes = ['**/*.kt', '**/internal/**']
        }
    }

    checkstyle {
        toolVersion = "8.10"
        configFile = new File(configDir, 'checkstyle.xml')
        configProperties.checkstyleConfigDir = configDir
    }

    task checkstyle(type: Checkstyle) {
        configFile = new File(configDir, 'checkstyle.xml')
        configProperties.checkstyleConfigDir = configDir
        source 'src/main/java', 'src/test/java'
        include '**/*.java'
        exclude '**/gen/**'
        classpath = files()

        reports {
            xml.enabled = false
            html.enabled = true
            html.setDestination new File("$project.buildDir/outputs/checkstyle/$projectName-checkstyle.html")
        }
    }

    task pmd(type: Pmd) {
        source 'src/main/java', 'src/test/java'
        include '**/*.java'
        exclude '**/gen/**'

        reports {
            xml.enabled = false
            html.enabled = true
            html.setDestination new File("$project.buildDir/outputs/pmd/$projectName-pmd.html")
        }
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "src/**/*.kt"
    }

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "-F", "src/**/*.kt"
    }

    task install(dependsOn: 'publishToMavenLocal')
}

task allJavadocs(type: Javadoc, group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name $version API"
    options.author true
    options.addStringOption 'Xdoclint:none', '-quiet'

    subprojects {
        afterEvaluate { project ->
            project.tasks.withType(Javadoc).each { javadocTask ->
                println(javadocTask.source)
                source += javadocTask.source
                classpath += javadocTask.classpath
                excludes += javadocTask.excludes
                includes += javadocTask.includes
            }
        }
    }
}

